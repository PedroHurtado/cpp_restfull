# Makefile para proyectos C++ con Crow
CXX = g++

# Flags comunes
COMMON_FLAGS = -std=c++20 -DCROW_MAIN

# Flags para DESARROLLO
CXXFLAGS_DEV = $(COMMON_FLAGS) -Wall -Wextra -Wpedantic -g -O0

# Flags para PRODUCCI√ìN (OPTIMIZADO)
CXXFLAGS_PROD = $(COMMON_FLAGS) -O3 -march=native -DNDEBUG \
                -ffunction-sections -fdata-sections \
                -flto -fvisibility=hidden

# Flags de enlace
LDFLAGS = -lpthread

# Flags de enlace para PRODUCCI√ìN
LDFLAGS_PROD = -lpthread \
               -Wl,--gc-sections \
               -Wl,--strip-all \
               -flto \
               -static-libgcc \
               -static-libstdc++

# Directorios
SRCDIR = src
INCDIR = include
BUILDDIR = build
BUILDDIR_PROD = build/production
BINDIR = build

# Archivos fuente
SOURCES = $(wildcard $(SRCDIR)/*.cpp)
OBJECTS = $(SOURCES:$(SRCDIR)/%.cpp=$(BUILDDIR)/%.o)
OBJECTS_PROD = $(SOURCES:$(SRCDIR)/%.cpp=$(BUILDDIR_PROD)/%.o)
TARGET = $(BINDIR)/main
TARGET_PROD = $(BINDIR)/api

# ============================================
# VARIABLES DOCKER (Personalizables)
# ============================================
# Puedes cambiar estos valores aqu√≠ o desde la l√≠nea de comandos:
# make docker-build DOCKER_IMAGE=mi-api DOCKER_TAG=v1.0

DOCKER_IMAGE ?= crow-api
DOCKER_TAG ?= latest
DOCKER_REGISTRY ?=
DOCKER_CONTAINER_NAME ?= crow-api-dev

# Nombre completo de la imagen
ifeq ($(DOCKER_REGISTRY),)
    DOCKER_FULL_IMAGE = $(DOCKER_IMAGE):$(DOCKER_TAG)
else
    DOCKER_FULL_IMAGE = $(DOCKER_REGISTRY)/$(DOCKER_IMAGE):$(DOCKER_TAG)
endif

# Regla principal (desarrollo)
all: crow-check $(TARGET)

# ============================================
# TARGETS DE PRODUCCI√ìN
# ============================================

# Compilar para producci√≥n (target principal optimizado)
production: crow-check $(TARGET_PROD)
	@echo ""
	@echo "‚úÖ Binario de producci√≥n generado!"
	@echo "üìä Informaci√≥n del binario:"
	@ls -lh $(TARGET_PROD)
	@file $(TARGET_PROD)
	@echo ""
	@echo "üîç Dependencias din√°micas:"
	@ldd $(TARGET_PROD) 2>/dev/null || echo "Binario est√°tico (sin dependencias din√°micas)"
	@echo ""
	@echo "üì¶ Tama√±o de secciones:"
	@size $(TARGET_PROD)
	@echo ""
	@echo "üöÄ Listo para desplegar: $(TARGET_PROD)"

# Crear ejecutable de producci√≥n (YA con strip autom√°tico por -Wl,--strip-all)
$(TARGET_PROD): $(OBJECTS_PROD) | build-dirs-prod
	@echo "üîó Enlazando ejecutable de producci√≥n optimizado..."
	$(CXX) $(CXXFLAGS_PROD) $(OBJECTS_PROD) -o $@ $(LDFLAGS_PROD)
	@echo "‚úÖ Compilaci√≥n de producci√≥n completada (optimizado y stripped)"

# Compilar archivos objeto para producci√≥n
$(BUILDDIR_PROD)/%.o: $(SRCDIR)/%.cpp | build-dirs-prod
	@echo "üî® Compilando para producci√≥n: $<..."
	$(CXX) $(CXXFLAGS_PROD) -I$(INCDIR) -c $< -o $@

# Crear directorios de producci√≥n
build-dirs-prod:
	@mkdir -p $(BUILDDIR_PROD) $(BINDIR)

# An√°lisis completo del binario de producci√≥n
analyze-production: $(TARGET_PROD)
	@echo "=========================================="
	@echo "üìä AN√ÅLISIS COMPLETO DEL BINARIO"
	@echo "=========================================="
	@echo ""
	@echo "üìÅ Tama√±o del archivo:"
	@ls -lh $(TARGET_PROD)
	@du -h $(TARGET_PROD)
	@echo ""
	@echo "üîç Tipo de archivo:"
	@file $(TARGET_PROD)
	@echo ""
	@echo "üìö Dependencias din√°micas:"
	@ldd $(TARGET_PROD) 2>/dev/null || echo "‚úÖ Binario completamente est√°tico"
	@echo ""
	@echo "üîß Informaci√≥n del binario (ELF):"
	@readelf -h $(TARGET_PROD) 2>/dev/null | grep -E "(Class|Type|Machine)" || true
	@echo ""
	@echo "üì¶ Secciones del binario:"
	@size $(TARGET_PROD)
	@echo ""
	@echo "üîê Protecciones de seguridad:"
	@readelf -l $(TARGET_PROD) 2>/dev/null | grep -E "(GNU_STACK|GNU_RELRO)" || true
	@echo ""
	@echo "üéØ S√≠mbolos exportados:"
	@nm -D $(TARGET_PROD) 2>/dev/null | wc -l | xargs echo "   S√≠mbolos din√°micos:"
	@echo ""
	@echo "=========================================="

# Comparar binarios dev vs prod
compare: $(TARGET) $(TARGET_PROD)
	@echo "=========================================="
	@echo "‚öñÔ∏è  COMPARACI√ìN DEV vs PROD"
	@echo "=========================================="
	@echo ""
	@echo "üìä DESARROLLO ($(TARGET)):"
	@ls -lh $(TARGET)
	@size $(TARGET) | tail -1
	@echo ""
	@echo "üöÄ PRODUCCI√ìN ($(TARGET_PROD)):"
	@ls -lh $(TARGET_PROD)
	@size $(TARGET_PROD) | tail -1
	@echo ""
	@dev_size=$$(stat -c%s "$(TARGET)" 2>/dev/null || stat -f%z "$(TARGET)"); \
	prod_size=$$(stat -c%s "$(TARGET_PROD)" 2>/dev/null || stat -f%z "$(TARGET_PROD)"); \
	reduction=$$(echo "scale=1; ($$dev_size - $$prod_size) * 100 / $$dev_size" | bc 2>/dev/null || echo "N/A"); \
	echo "üíæ Reducci√≥n de tama√±o: $$reduction%"
	@echo "=========================================="

# ============================================
# TARGETS DE DOCKER
# ============================================

# Construir imagen Docker
docker-build: production
	@echo "üê≥ Construyendo imagen Docker..."
	@echo "üì¶ Imagen: $(DOCKER_FULL_IMAGE)"
	@if ! command -v docker >/dev/null 2>&1; then \
		echo "‚ùå Docker no est√° instalado o no est√° disponible"; \
		echo "üí° Aseg√∫rate de tener Docker instalado y corriendo"; \
		exit 1; \
	fi
	@if [ ! -f Dockerfile ]; then \
		echo "‚ùå Dockerfile no encontrado"; \
		exit 1; \
	fi
	docker build -t $(DOCKER_FULL_IMAGE) .
	@echo ""
	@echo "‚úÖ Imagen Docker construida: $(DOCKER_FULL_IMAGE)"
	@docker images $(DOCKER_IMAGE)

# Ejecutar contenedor (foreground)
docker-run: docker-build
	@echo "üöÄ Ejecutando contenedor: $(DOCKER_CONTAINER_NAME)"
	@echo "üì° API disponible en: http://localhost:8080"
	@echo "‚èπÔ∏è  Presiona Ctrl+C para detener"
	docker run --rm -p 8080:8080 --name $(DOCKER_CONTAINER_NAME) $(DOCKER_FULL_IMAGE)

# Ejecutar contenedor (background)
docker-run-bg: docker-build
	@echo "üöÄ Ejecutando contenedor en background..."
	@if docker ps -a --format '{{.Names}}' | grep -q "^$(DOCKER_CONTAINER_NAME)$$"; then \
		echo "‚ö†Ô∏è  El contenedor '$(DOCKER_CONTAINER_NAME)' ya existe. Elimin√°ndolo..."; \
		docker rm -f $(DOCKER_CONTAINER_NAME) 2>/dev/null || true; \
	fi
	docker run -d -p 8080:8080 --name $(DOCKER_CONTAINER_NAME) $(DOCKER_FULL_IMAGE)
	@echo "‚úÖ Contenedor corriendo: $(DOCKER_CONTAINER_NAME)"
	@echo "üì° API disponible en: http://localhost:8080"
	@echo "üìã Ver logs: make docker-logs"
	@echo "üõë Detener: make docker-stop"

# Ver logs del contenedor
docker-logs:
	@if docker ps --format '{{.Names}}' | grep -q "^$(DOCKER_CONTAINER_NAME)$$"; then \
		echo "üìã Logs de $(DOCKER_CONTAINER_NAME):"; \
		docker logs -f $(DOCKER_CONTAINER_NAME); \
	else \
		echo "‚ùå El contenedor '$(DOCKER_CONTAINER_NAME)' no est√° corriendo"; \
		echo "üí° Usa 'make docker-run-bg' para iniciarlo"; \
	fi

# Detener contenedor
docker-stop:
	@echo "üõë Deteniendo contenedor: $(DOCKER_CONTAINER_NAME)"
	@docker stop $(DOCKER_CONTAINER_NAME) 2>/dev/null || echo "‚ö†Ô∏è  Contenedor no encontrado o ya detenido"
	@docker rm $(DOCKER_CONTAINER_NAME) 2>/dev/null || true
	@echo "‚úÖ Contenedor detenido y eliminado"

# Test autom√°tico del contenedor
docker-test: docker-run-bg
	@echo "üß™ Esperando que el servidor inicie..."
	@sleep 3
	@echo "üß™ Probando endpoint /api/tareas..."
	@if curl -s -f http://localhost:8080/api/tareas > /dev/null; then \
		echo "‚úÖ API respondi√≥ correctamente"; \
		curl -s http://localhost:8080/api/tareas | head -20; \
	else \
		echo "‚ùå Error al conectar con la API"; \
	fi
	@echo ""
	@$(MAKE) docker-stop

# Inspeccionar imagen
docker-inspect: docker-build
	@echo "=========================================="
	@echo "üîç INFORMACI√ìN DE LA IMAGEN"
	@echo "=========================================="
	@echo ""
	@echo "üì¶ Imagen: $(DOCKER_FULL_IMAGE)"
	@docker images $(DOCKER_IMAGE) --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
	@echo ""
	@echo "üìö Historial de capas (primeras 10):"
	@docker history $(DOCKER_FULL_IMAGE) --no-trunc | head -11
	@echo ""
	@echo "üîß Detalles de configuraci√≥n:"
	@docker inspect $(DOCKER_FULL_IMAGE) --format='Usuario: {{.Config.User}}'
	@docker inspect $(DOCKER_FULL_IMAGE) --format='Puerto expuesto: {{.Config.ExposedPorts}}'
	@docker inspect $(DOCKER_FULL_IMAGE) --format='Comando: {{.Config.Cmd}}'
	@echo ""
	@echo "=========================================="

# Entrar al contenedor (debug)
docker-shell:
	@if docker ps --format '{{.Names}}' | grep -q "^$(DOCKER_CONTAINER_NAME)$$"; then \
		echo "üêö Entrando al contenedor $(DOCKER_CONTAINER_NAME)..."; \
		docker exec -it $(DOCKER_CONTAINER_NAME) /bin/sh; \
	else \
		echo "‚ùå El contenedor '$(DOCKER_CONTAINER_NAME)' no est√° corriendo"; \
		echo "üí° Usa 'make docker-run-bg' para iniciarlo primero"; \
	fi

# Subir imagen a registry
docker-push: docker-build
	@if [ -z "$(DOCKER_REGISTRY)" ]; then \
		echo "‚ùå DOCKER_REGISTRY no est√° configurado"; \
		echo "üí° Usa: make docker-push DOCKER_REGISTRY=tu-usuario"; \
		exit 1; \
	fi
	@echo "üì§ Subiendo imagen a registry..."
	docker push $(DOCKER_FULL_IMAGE)
	@echo "‚úÖ Imagen subida: $(DOCKER_FULL_IMAGE)"

# Limpiar im√°genes Docker
docker-clean:
	@echo "üßπ Limpiando im√°genes Docker de $(DOCKER_IMAGE)..."
	@if docker images $(DOCKER_IMAGE) -q | grep -q .; then \
		docker rmi -f $$(docker images $(DOCKER_IMAGE) -q) 2>/dev/null || true; \
		echo "‚úÖ Im√°genes eliminadas"; \
	else \
		echo "‚ÑπÔ∏è  No hay im√°genes de $(DOCKER_IMAGE) para limpiar"; \
	fi

# Limpiar contenedor y imagen
docker-clean-all: docker-stop docker-clean
	@echo "‚úÖ Limpieza completa de Docker realizada"

# ============================================
# TARGETS ORIGINALES (DESARROLLO)
# ============================================

# Verificar que Crow est√© disponible e instalarlo si es necesario
crow-check:
	@echo "üîç Verificando instalaci√≥n de Crow..."
	@if ! pkg-config --exists crow 2>/dev/null && [ ! -f /usr/local/include/crow.h ] && [ ! -f /usr/include/crow.h ]; then \
		echo "‚ùå Crow no encontrado. Instalando dependencias y Crow..."; \
		$(MAKE) install-dependencies; \
		$(MAKE) install-crow-simple; \
	else \
		echo "‚úÖ Crow ya est√° disponible en el sistema"; \
	fi

# Instalar dependencias necesarias (incluyendo ASIO)
install-dependencies:
	@echo "üì¶ Instalando dependencias del sistema..."
	@if command -v apt-get >/dev/null 2>&1; then \
		echo "üîß Detectado sistema basado en Debian/Ubuntu"; \
		sudo apt-get update; \
		sudo apt-get install -y build-essential cmake git libboost-all-dev libasio-dev curl wget binutils bc; \
	elif command -v yum >/dev/null 2>&1; then \
		echo "üîß Detectado sistema basado en RedHat/CentOS"; \
		sudo yum groupinstall -y "Development Tools"; \
		sudo yum install -y cmake git boost-devel asio-devel curl wget binutils bc; \
	elif command -v dnf >/dev/null 2>&1; then \
		echo "üîß Detectado sistema Fedora"; \
		sudo dnf groupinstall -y "Development Tools"; \
		sudo dnf install -y cmake git boost-devel asio-devel curl wget binutils bc; \
	elif command -v pacman >/dev/null 2>&1; then \
		echo "üîß Detectado sistema Arch Linux"; \
		sudo pacman -S --noconfirm base-devel cmake git boost asio curl wget binutils bc; \
	else \
		echo "‚ùå Sistema no soportado autom√°ticamente."; \
		exit 1; \
	fi
	@echo "‚úÖ Dependencias instaladas correctamente"

# Instalar Crow simple (header-only)
install-crow-simple:
	@echo "üì¶ Instalando Crow (versi√≥n header-only)..."
	@temp_dir=$$(mktemp -d); \
	echo "üìÅ Directorio temporal: $$temp_dir"; \
	cd "$$temp_dir"; \
	echo "üì• Descargando Crow header-only..."; \
	if command -v wget >/dev/null 2>&1; then \
		wget -O crow_all.h https://github.com/CrowCpp/Crow/releases/download/v1.2.0/crow_all.h; \
	elif command -v curl >/dev/null 2>&1; then \
		curl -L -o crow_all.h https://github.com/CrowCpp/Crow/releases/download/v1.2.0/crow_all.h; \
	else \
		echo "‚ùå No se encontr√≥ wget ni curl"; \
		exit 1; \
	fi; \
	if [ -f crow_all.h ] && [ -s crow_all.h ]; then \
		echo "üì¶ Instalando header en el sistema..."; \
		sudo mkdir -p /usr/local/include; \
		sudo cp crow_all.h /usr/local/include/crow.h; \
		echo "‚úÖ Crow (header-only) instalado correctamente"; \
	else \
		echo "‚ùå Error al descargar Crow header-only"; \
		exit 1; \
	fi; \
	cd /; \
	rm -rf "$$temp_dir"

# Crear el ejecutable de desarrollo
$(TARGET): $(OBJECTS) | build-dirs
	@echo "üîó Enlazando ejecutable de desarrollo..."
	$(CXX) $(OBJECTS) -o $@ $(LDFLAGS)
	@echo "‚úÖ Compilaci√≥n de desarrollo completada: $(TARGET)"

# Compilar archivos objeto de desarrollo
$(BUILDDIR)/%.o: $(SRCDIR)/%.cpp | build-dirs
	@echo "üî® Compilando para desarrollo: $<..."
	$(CXX) $(CXXFLAGS_DEV) -I$(INCDIR) -c $< -o $@

# Crear directorios si no existen
build-dirs:
	@mkdir -p $(BUILDDIR) $(BINDIR)

# Limpiar archivos generados
clean:
	@echo "üßπ Limpiando archivos generados..."
	rm -rf $(BUILDDIR) $(TARGET)
	@echo "‚úÖ Limpieza completada"

# Limpiar solo producci√≥n
clean-production:
	@echo "üßπ Limpiando archivos de producci√≥n..."
	rm -rf $(BUILDDIR_PROD) $(TARGET_PROD)
	@echo "‚úÖ Limpieza de producci√≥n completada"

# Limpiar todo
clean-all: clean clean-production
	@echo "‚úÖ Limpieza completa realizada"

# Ejecutar el programa de desarrollo
run: $(TARGET)
	@echo "üöÄ Ejecutando servidor de desarrollo..."
	@echo "üì° Disponible en: http://localhost:8080"
	@echo "‚èπÔ∏è  Presiona Ctrl+C para detener"
	./$(TARGET)

# Ejecutar el programa de producci√≥n localmente
run-production: $(TARGET_PROD)
	@echo "üöÄ Ejecutando servidor de producci√≥n..."
	@echo "üì° Disponible en: http://localhost:8080"
	@echo "‚èπÔ∏è  Presiona Ctrl+C para detener"
	./$(TARGET_PROD)

# Ejecutar en segundo plano
run-bg: $(TARGET)
	@echo "üöÄ Ejecutando servidor en segundo plano..."
	@echo "üì° Disponible en: http://localhost:8080"
	./$(TARGET) &
	@echo "üí° Usa 'make stop' para detener el servidor"

# Detener servidor en segundo plano
stop:
	@echo "‚èπÔ∏è  Deteniendo servidor..."
	-pkill -f "./$(TARGET)" 2>/dev/null || true
	-pkill -f "./$(TARGET_PROD)" 2>/dev/null || true
	@echo "‚úÖ Servidor detenido"

# Test r√°pido del servidor
test: run-bg
	@echo "üß™ Probando servidor..."
	@sleep 2
	@curl -s http://localhost:8080/api/tareas || echo "‚ùå Error al conectar"
	@$(MAKE) stop

# Debug con gdb
debug: $(TARGET)
	@echo "üêõ Iniciando debug con gdb..."
	gdb ./$(TARGET)

# Verificar memoria con valgrind
valgrind: $(TARGET)
	@echo "üîç Verificando memoria con valgrind..."
	valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./$(TARGET)

# Verificar estado del sistema
check-system:
	@echo "üîç Verificando estado del sistema..."
	@echo "üìã Compilador:"
	@$(CXX) --version | head -1 || echo "‚ùå g++ no encontrado"
	@echo "üìã Docker:"
	@docker --version 2>/dev/null || echo "‚ùå Docker no encontrado"
	@echo "üìã Herramientas de binarios:"
	@strip --version | head -1 2>/dev/null || echo "‚ö†Ô∏è  strip no encontrado"
	@size --version | head -1 2>/dev/null || echo "‚ö†Ô∏è  size no encontrado"
	@echo "üìã Crow:"
	@if [ -f /usr/local/include/crow.h ] || [ -f /usr/include/crow.h ]; then \
		echo "‚úÖ Crow encontrado"; \
	else \
		echo "‚ùå Crow no encontrado"; \
	fi

# Mostrar informaci√≥n del proyecto
info:
	@echo "=========================================="
	@echo "üìã INFORMACI√ìN DEL PROYECTO"
	@echo "=========================================="
	@echo ""
	@echo "üîß DESARROLLO:"
	@echo "   Compilador: $(CXX)"
	@echo "   Est√°ndar: C++20"
	@echo "   Flags: $(CXXFLAGS_DEV)"
	@echo "   Ejecutable: $(TARGET)"
	@echo ""
	@echo "üöÄ PRODUCCI√ìN:"
	@echo "   Compilador: $(CXX)"
	@echo "   Est√°ndar: C++20"
	@echo "   Flags: $(CXXFLAGS_PROD)"
	@echo "   Enlace: $(LDFLAGS_PROD)"
	@echo "   Ejecutable: $(TARGET_PROD)"
	@echo ""
	@echo "üê≥ DOCKER:"
	@echo "   Imagen: $(DOCKER_FULL_IMAGE)"
	@echo "   Contenedor: $(DOCKER_CONTAINER_NAME)"
	@echo "   Registry: $(DOCKER_REGISTRY)"
	@echo ""
	@echo "üìÅ Archivos fuente: $(SOURCES)"
	@echo "=========================================="

# Mostrar ayuda
help:
	@echo "=========================================="
	@echo "üîß COMANDOS DISPONIBLES"
	@echo "=========================================="
	@echo ""
	@echo "üèóÔ∏è  Construcci√≥n (Desarrollo):"
	@echo "  make                    - Compilar para desarrollo (con debug)"
	@echo "  make run                - Compilar y ejecutar en modo desarrollo"
	@echo "  make debug              - Ejecutar con gdb"
	@echo "  make valgrind           - Verificar memoria"
	@echo ""
	@echo "üöÄ Construcci√≥n (Producci√≥n):"
	@echo "  make production         - Compilar binario optimizado (RECOMENDADO)"
	@echo "  make run-production     - Ejecutar binario de producci√≥n localmente"
	@echo "  make analyze-production - An√°lisis completo del binario"
	@echo "  make compare            - Comparar dev vs prod"
	@echo ""
	@echo "üê≥ Docker:"
	@echo "  make docker-build       - Construir imagen Docker"
	@echo "  make docker-run         - Construir y ejecutar (foreground)"
	@echo "  make docker-run-bg      - Construir y ejecutar (background)"
	@echo "  make docker-logs        - Ver logs del contenedor"
	@echo "  make docker-stop        - Detener y eliminar contenedor"
	@echo "  make docker-test        - Test autom√°tico del contenedor"
	@echo "  make docker-inspect     - Inspeccionar imagen Docker"
	@echo "  make docker-shell       - Entrar al contenedor (debug)"
	@echo "  make docker-push        - Subir imagen a registry"
	@echo "  make docker-clean       - Limpiar im√°genes Docker"
	@echo "  make docker-clean-all   - Limpiar contenedor e im√°genes"
	@echo ""
	@echo "üì¶ Instalaci√≥n:"
	@echo "  make install-dependencies - Instalar dependencias del sistema"
	@echo "  make install-crow-simple  - Instalar Crow header-only"
	@echo ""
	@echo "üßπ Limpieza:"
	@echo "  make clean              - Limpiar archivos de desarrollo"
	@echo "  make clean-production   - Limpiar archivos de producci√≥n"
	@echo "  make clean-all          - Limpiar todo"
	@echo ""
	@echo "üîç Informaci√≥n:"
	@echo "  make check-system       - Verificar dependencias"
	@echo "  make info               - Mostrar configuraci√≥n del proyecto"
	@echo "  make help               - Mostrar esta ayuda"
	@echo ""
	@echo "=========================================="
	@echo "üí° PERSONALIZAR NOMBRE DE IMAGEN:"
	@echo "=========================================="
	@echo "make docker-build DOCKER_IMAGE=mi-api DOCKER_TAG=v1.0"
	@echo "make docker-push DOCKER_REGISTRY=tu-usuario"
	@echo ""
	@echo "=========================================="
	@echo "üí° FLUJO RECOMENDADO PARA PRODUCCI√ìN:"
	@echo "=========================================="
	@echo "1. make production          # Compilar optimizado"
	@echo "2. make analyze-production  # Verificar el binario"
	@echo "3. make docker-build        # Crear imagen Docker"
	@echo "4. make docker-test         # Probar contenedor"
	@echo "5. make docker-push         # Subir a registry (opcional)"
	@echo "=========================================="

.PHONY: all production analyze-production compare clean clean-production clean-all \
        run run-production run-bg stop test debug valgrind help info crow-check \
        install-dependencies install-crow-simple check-system build-dirs build-dirs-prod \
        docker-build docker-run docker-run-bg docker-logs docker-stop docker-test \
        docker-inspect docker-shell docker-push docker-clean docker-clean-all